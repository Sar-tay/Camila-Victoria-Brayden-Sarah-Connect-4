# Camila Reyes, CR
# Sarah Taylor, ST
# Brayden Bouffard, BB
# Victoria Smith, VS

# Four-In-A-Row (a Connect Four clone)
# By Al Sweigart al@inventwithpython.com
# http://inventwithpython.com/pygame
# Released under a "Simplified BSD" license

import random, copy, sys, pygame #Imports the different python modules necessary for the game. VS
from pygame.locals import *

BOARDWIDTH = 8  # Specifies how many spaces wide the board is. VS
BOARDHEIGHT = 8 # Specifies how many spaces tall the board is. VS
assert BOARDWIDTH >= 4 and BOARDHEIGHT >= 4, 'Board must be at least 4x4.' 
# The board must be at least 4 wide and 4 tall. VS
DIFFICULTY = 1 # The number many moves that the computer looks ahead. VS (>2 is usually too much)

SPACESIZE = 50 # Size of the tokens and individual board spaces in pixels. VS

FPS = 30 # Frames per second to update the screen. VS
WINDOWWIDTH = 640 # Width of the program's window, in pixels. VS
WINDOWHEIGHT = 480 # Height in pixels. VS

#Sets the axis margin widths. VS
XMARGIN = int((WINDOWWIDTH - BOARDWIDTH * SPACESIZE) / 2)
YMARGIN = int((WINDOWHEIGHT - BOARDHEIGHT * SPACESIZE) / 2)

#The specific quantities of each colour pigment to acheive the desired colour. VS
PURPLE = (255, 0, 255) 
WHITE = (255, 255, 255)

BGCOLOR = PURPLE # The board colour will appear in purple. VS
TEXTCOLOR = WHITE # The textcolour will appear in white. VS

#Assigns a varialbe to different string inputs. VS 
RED = 'red'
BLACK = 'black'
EMPTY = None
HUMAN = 'human'
COMPUTER = 'computer'

#Sets up the display of the game when it is first opened, imports all images. VS
def main():
    global FPSCLOCK, DISPLAYSURF, REDPILERECT, BLACKPILERECT, REDTOKENIMG
    global BLACKTOKENIMG, BOARDIMG, ARROWIMG, ARROWRECT, HUMANWINNERIMG
    global COMPUTERWINNERIMG, WINNERRECT, TIEWINNERIMG

    pygame.init()
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
    pygame.display.set_caption('Four in a Row')
# Imports all nessecary images and resizes them to the correct width and height. VS
    REDPILERECT = pygame.Rect(int(SPACESIZE / 2), WINDOWHEIGHT - int(3 * SPACESIZE / 2), SPACESIZE, SPACESIZE)
    BLACKPILERECT = pygame.Rect(WINDOWWIDTH - int(3 * SPACESIZE / 2), WINDOWHEIGHT - int(3 * SPACESIZE / 2), SPACESIZE, SPACESIZE)
    REDTOKENIMG = pygame.image.load('4row_pink_new.png')
    REDTOKENIMG = pygame.transform.smoothscale(REDTOKENIMG, (SPACESIZE, SPACESIZE))
    BLACKTOKENIMG = pygame.image.load('4row_turq_new.png')
    BLACKTOKENIMG = pygame.transform.smoothscale(BLACKTOKENIMG, (SPACESIZE, SPACESIZE))
    BOARDIMG = pygame.image.load('4row_board_new.png')
    BOARDIMG = pygame.transform.smoothscale(BOARDIMG, (SPACESIZE, SPACESIZE))
# Imports all nessecary images. VS
    HUMANWINNERIMG = pygame.image.load('4row_humanwinner_new.png')
    COMPUTERWINNERIMG = pygame.image.load('4row_computerwinner_new.png')
    TIEWINNERIMG = pygame.image.load('4row_tie_new.png')
    WINNERRECT = HUMANWINNERIMG.get_rect()
    WINNERRECT.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))
# Sets images to the right locations. VS
    ARROWIMG = pygame.image.load('4row_arrow.png')
    ARROWRECT = ARROWIMG.get_rect()
    ARROWRECT.left = REDPILERECT.right + 10
    ARROWRECT.centery = REDPILERECT.centery

    isFirstGame = True
# If it is the players first time playing the game the runGame(isFirstGame) function,
# will run and certain choices will be limited to the computer. VS
    while True:
        runGame(isFirstGame)
        isFirstGame = False

def runGame(isFirstGame):
    if isFirstGame:
        # Let the computer go first on the first game, 
        # So the player can see how the tokens are dragged from the token piles. VS
        turn = COMPUTER
        showHelp = True
    else:
        # If it is not the players first game then randomly choose who goes first. VS
        if random.randint(0, 1) == 0: # If the random number is 0 then the computer will go first. VS
            turn = COMPUTER
        else:
            turn = HUMAN # If the random number is not 0 (1) the player will go first. VS
        showHelp = False

    # Sets up a blank board data structure VS
    mainBoard = getNewBoard()

# main game loop
    while True: 
        if turn == HUMAN: # if it is the player's turn  
            getHumanMove(mainBoard, showHelp) # the player will execute their move through this function
            if showHelp:
                # turn off help arrow after the first move
                showHelp = False
            if isWinner(mainBoard, RED): # if the isWinner functin is true through red tokens the human wins ST
                winnerImg = HUMANWINNERIMG # displays an image that the human player is the winner ST
                break
            turn = COMPUTER # switch to other player's turn
        else:
            # Computer player's turn
            column = getComputerMove(mainBoard) # decides which column the computer will play in ST
            animateComputerMoving(mainBoard, column)
            makeMove(mainBoard, BLACK, column) # computer places a black token in the desired column ST
            if isWinner(mainBoard, BLACK):
                winnerImg = COMPUTERWINNERIMG # displays an image that the computer is the winner
                break
            turn = HUMAN # switch to other player's turn
#using an if statement to determine the result of the game when no one wins ST
        if isBoardFull(mainBoard):
            # A completely filled board means it's a tie.
            #display an image that says tie ST
            winnerImg = TIEWINNERIMG
            break
#Next section of code is making it so that the winner/tie image remains on the screen until the player exits/quits the game ST
    while True:
        # Keep looping until player clicks the mouse or quits.
        drawBoard(mainBoard)
        DISPLAYSURF.blit(winnerImg, WINNERRECT)
        pygame.display.update()
        FPSCLOCK.tick()
        for event in pygame.event.get(): # event handling loop
            if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == MOUSEBUTTONUP:
                return

#function to allow the computer to place pieces ST
#if there is still a column on the board that does not have a piece in it that means the computer can make a move ST
def makeMove(board, player, column):
    lowest = getLowestEmptySpace(board, column)
    if lowest != -1:
        board[column][lowest] = player

#defining a function for token display ST
def drawBoard(board, extraToken=None):
    DISPLAYSURF.fill(BGCOLOR)

    # draw tokens
    spaceRect = pygame.Rect(0, 0, SPACESIZE, SPACESIZE)
    for x in range(BOARDWIDTH):
        for y in range(BOARDHEIGHT):
            #coding how the tokens are going to move using the pixels, so that it moves smoothly down the screen, going across all the pixels ST
            spaceRect.topleft = (XMARGIN + (x * SPACESIZE), YMARGIN + (y * SPACESIZE))
            if board[x][y] == RED:
            #creating conditions under which to display a red token ST
                DISPLAYSURF.blit(REDTOKENIMG, spaceRect)
            elif board[x][y] == BLACK: 
            #if the conditions to display red token are not met that means the conditions to display a balck token are ST
                DISPLAYSURF.blit(BLACKTOKENIMG, spaceRect)

    # draw the extra token
    if extraToken != None:
        if extraToken['color'] == RED: #how to display the tokens, 50 pixels in the x and 50 pixels in the y direction for both red and black depending on which ST
                                      #colour is being displayed using the conditions previously defined ST
            DISPLAYSURF.blit(REDTOKENIMG, (extraToken['x'], extraToken['y'], SPACESIZE, SPACESIZE))
        elif extraToken['color'] == BLACK:
            DISPLAYSURF.blit(BLACKTOKENIMG, (extraToken['x'], extraToken['y'], SPACESIZE, SPACESIZE))

    # draw board over the tokens
    for x in range(BOARDWIDTH):
        for y in range(BOARDHEIGHT):
 #when the tokens are within the range of the board (meaning they have alreayd been played) this places the image of the board over top of the pieces ST
 #allowing it to look like the tokens are inside of the board ST
            spaceRect.topleft = (XMARGIN + (x * SPACESIZE), YMARGIN + (y * SPACESIZE))
            DISPLAYSURF.blit(BOARDIMG, spaceRect)

#for the unused/unplayed tokens
    # draw the red and black tokens off to the side ST
    DISPLAYSURF.blit(REDTOKENIMG, REDPILERECT) # red on the left
    DISPLAYSURF.blit(BLACKTOKENIMG, BLACKPILERECT) # black on the right


def getNewBoard():
    board = []
    for x in range(BOARDWIDTH):
        board.append([EMPTY] * BOARDHEIGHT)#this adds empty columns and rows (creating a blank board) because .append adds so ething to the end of a list ST
    return board

def getHumanMove(board, isFirstMove):
    draggingToken = False
    tokenx, tokeny = None, None
    while True:
        for event in pygame.event.get(): # event handling loop
            if event.type == QUIT:
                pygame.quit()#if player quits close game exit the system ST
                sys.exit()
            elif event.type == MOUSEBUTTONDOWN and not draggingToken and REDPILERECT.collidepoint(event.pos):
  #This codes what happens when the player clicks on the token, so if the red token is clicked on (mouse button down) it allows the player to be able to drag the token ST
               # start of dragging on red token pile. ST
                draggingToken = True
                tokenx, tokeny = event.pos
            elif event.type == MOUSEMOTION and draggingToken:
                # update the position of the red token being dragged
   #as the mouse is moving this section codes the image of the token to follow the mouse, the x and y coordinates are equal to where the mouse goes ST
               tokenx, tokeny = event.pos
            elif event.type == MOUSEBUTTONUP and draggingToken:
                # let go of the token being dragged
             #tokeny < ymargin = when the token is inside the board width ST
             #tokenx > xmargin = when the token is above the board height ST
             #aka when the token is hovering over a column ST
                if tokeny < YMARGIN and tokenx > XMARGIN and tokenx < WINDOWWIDTH - XMARGIN:
                    # let go at the top of the screen.
                    column = int((tokenx - XMARGIN) / SPACESIZE) # tokenx - xmargin = subtracting howmuch space is left availble from where the token currently is ST
                    if isValidMove(board, column): # when the subtraction is valid (is 0 or higher) it drops the token ST
                        animateDroppingToken(board, column, RED)
                        board[column][getLowestEmptySpace(board, column)] = RED
                        drawBoard(board)
                        pygame.display.update()
                        return
                tokenx, tokeny = None, None
                draggingToken = False
        if tokenx != None and tokeny != None:
            drawBoard(board, {'x':tokenx - int(SPACESIZE / 2), 'y':tokeny - int(SPACESIZE / 2), 'color':RED})
        else:
            drawBoard(board)

        if isFirstMove:
            # Show the help arrow for the player's first move.
            DISPLAYSURF.blit(ARROWIMG, ARROWRECT)

        # It updates a section of the screen. CR
        pygame.display.update()
        #It sets the frames per second, so how fast the program will run. CR
        FPSCLOCK.tick()

# Uses cartesian coordinates (x,y) to set the location of the token. CR
def animateDroppingToken(board, column, color):
    x = XMARGIN + column * SPACESIZE
    y = YMARGIN - SPACESIZE
    # Sets the speed at which the token will drop. CR
    dropSpeed = 1.0
    
    #Finds the lowest available spot on the board for the token to drop in. CR
    lowestEmptySpace = getLowestEmptySpace(board, column)

    while True:
        y += int(dropSpeed)
        dropSpeed += 0.5
        if int((y - YMARGIN) / SPACESIZE) >= lowestEmptySpace:
            return
        drawBoard(board, {'x':x, 'y':y, 'color':color})
        pygame.display.update()
        FPSCLOCK.tick()


def animateComputerMoving(board, column):
    x = BLACKPILERECT.left
    y = BLACKPILERECT.top
    speed = 1.0
    # moving the black tile up
    while y > (YMARGIN - SPACESIZE):
        y -= int(speed)
        speed += 0.5
        drawBoard(board, {'x':x, 'y':y, 'color':BLACK})
        pygame.display.update()
        FPSCLOCK.tick()
    # moving the black tile over
    y = YMARGIN - SPACESIZE
    speed = 1.0
    while x > (XMARGIN + column * SPACESIZE):
        x -= int(speed)
        speed += 0.5
        drawBoard(board, {'x':x, 'y':y, 'color':BLACK})
        pygame.display.update()
        FPSCLOCK.tick()
    # dropping the black tile
    animateDroppingToken(board, column, BLACK)


def getComputerMove(board):
    potentialMoves = getPotentialMoves(board, BLACK, DIFFICULTY)
    # get the best fitness from the potential moves
    bestMoveFitness = -1
    for i in range(BOARDWIDTH):
        if potentialMoves[i] > bestMoveFitness and isValidMove(board, i):
            bestMoveFitness = potentialMoves[i]
    # find all potential moves that have this best fitness
    bestMoves = []
    for i in range(len(potentialMoves)):
        if potentialMoves[i] == bestMoveFitness and isValidMove(board, i):
            bestMoves.append(i)
    return random.choice(bestMoves)

# Figures out the moves that can be made.
def getPotentialMoves(board, tile, lookAhead):
    if lookAhead == 0 or isBoardFull(board):
        return [0] * BOARDWIDTH
        # Checks to see if their are any moves that can be made.

    if tile == RED:
        enemyTile = BLACK
    else:
        enemyTile = RED
    # Determines if the codes colour is black or red.
        
    #Figures out the best move to make by comparing the possible moves and seeing which are the best or worse given the layout of the game. BB
    potentialMoves = [0] * BOARDWIDTH
    for firstMove in range(BOARDWIDTH):
        dupeBoard = copy.deepcopy(board)
        if not isValidMove(dupeBoard, firstMove):
            continue
        makeMove(dupeBoard, tile, firstMove)
        if isWinner(dupeBoard, tile):
            # a winning move automatically will be valued as the best choice. BB
            potentialMoves[firstMove] = 1
            break 
            # don't bother calculating other moves. BB
        else:
            # do other player's counter moves and determine best one. BB
            if isBoardFull(dupeBoard):
                potentialMoves[firstMove] = 0
            else:
                for counterMove in range(BOARDWIDTH):
                    dupeBoard2 = copy.deepcopy(dupeBoard)
                    if not isValidMove(dupeBoard2, counterMove):
                        continue
                    makeMove(dupeBoard2, enemyTile, counterMove)
                    if isWinner(dupeBoard2, enemyTile):
                        # a losing move automatically will be valued as the worst choice. BB
                        potentialMoves[firstMove] = -1
                        break
                    else:
                        # do the recursive call to getPotentialMoves() BB
                        results = getPotentialMoves(dupeBoard2, tile, lookAhead - 1)
                        potentialMoves[firstMove] += (sum(results) / BOARDWIDTH) / BOARDWIDTH
    return potentialMoves


def getLowestEmptySpace(board, column):
    # Returns the row that has the lowest empty spot. BB
    for y in range(BOARDHEIGHT-1, -1, -1):
        if board[column][y] == EMPTY:
            return y
    return -1


def isValidMove(board, column):
    # Looks at each column, checks which are full and which having empty spaces in them. BB
    # Returns true if their is empty space. BB
    # Returns false if the colum in full. BB
    if column < 0 or column >= (BOARDWIDTH) or board[column][0] != EMPTY:
        return False
    return True


def isBoardFull(board):
    # Returns True if there are no empty spaces anywhere on the board. BB
    for x in range(BOARDWIDTH):
        for y in range(BOARDHEIGHT):
            if board[x][y] == EMPTY:
                return False
    return True


def isWinner(board, tile):
# Checks to see if there are four in a row anywhere on the board. BB
# Returns true if there is. BB
# Returns false if there is not. BB
    # check horizontal spaces. BB
    for x in range(BOARDWIDTH - 3):
        for y in range(BOARDHEIGHT):
            if board[x][y] == tile and board[x+1][y] == tile and board[x+2][y] == tile and board[x+3][y] == tile:
                return True
    # check vertical spaces. BB
    for x in range(BOARDWIDTH):
        for y in range(BOARDHEIGHT - 3):
            if board[x][y] == tile and board[x][y+1] == tile and board[x][y+2] == tile and board[x][y+3] == tile:
                return True
    # check / diagonal spaces. BB
    for x in range(BOARDWIDTH - 3):
        for y in range(3, BOARDHEIGHT):
            if board[x][y] == tile and board[x+1][y-1] == tile and board[x+2][y-2] == tile and board[x+3][y-3] == tile:
                return True
    # check \ diagonal spaces. BB
    for x in range(BOARDWIDTH - 3):
        for y in range(BOARDHEIGHT - 3):
            if board[x][y] == tile and board[x+1][y+1] == tile and board[x+2][y+2] == tile and board[x+3][y+3] == tile:
                return True
    return False

# Ends game if there are four in a row. BB
if __name__ == '__main__':
    main()
    
